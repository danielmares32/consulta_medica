{"version":3,"sources":["../../src/socket-io.service.ts","../../src/socket-io.module.ts"],"names":["WrappedSocket","config","this","subscribersCounter","eventObservables$","emptyConfig","url","options","undefined","ioFunc","io.default","io","ioSocket","prototype","of","namespace","on","eventName","callback","once","connect","disconnect","close","apply","arguments","emit","args","_i","length","removeListener","removeAllListeners","fromEvent","_this","Observable","observer","listener","data","next","pipe","share","fromOneTimeEvent","Promise","resolve","SocketFactory","SOCKET_CONFIG_TOKEN","InjectionToken","SocketIoModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","NgModule"],"mappings":"81BAiBI,SAAAA,EAAoBC,GAAAC,KAAAD,OAAAA,EARpBC,KAAAC,mBAA6C,GAC7CD,KAAAE,kBAAqD,GAErDF,KAAAG,YAA8B,CAC1BC,IAAK,GACLC,QAAS,SAIMC,IAAXP,IACAA,EAASC,KAAKG,aAElB,IAAMC,EAAcL,EAAOK,IACrBC,EAAeN,EAAOM,QACtBE,EAAUC,EAAAA,QAAsBA,EAAAA,QAAqBC,EAC3DT,KAAKU,SAAWH,EAAOH,EAAKC,UAGhCP,EAAAa,UAAAC,GAAA,SAAGC,GACCb,KAAKU,SAASE,GAAGC,IAGrBf,EAAAa,UAAAG,GAAA,SAAGC,EAAmBC,GAClBhB,KAAKU,SAASI,GAAGC,EAAWC,IAGhClB,EAAAa,UAAAM,KAAA,SAAKF,EAAmBC,GACpBhB,KAAKU,SAASO,KAAKF,EAAWC,IAGlClB,EAAAa,UAAAO,QAAA,WACI,OAAOlB,KAAKU,SAASQ,WAGzBpB,EAAAa,UAAAQ,WAAA,SAAWC,GACP,OAAOpB,KAAKU,SAASS,WAAWE,MAAMrB,KAAKU,SAAUY,YAGzDxB,EAAAa,UAAAY,KAAA,SAAKR,OAAmB,IAAAS,EAAA,GAAAC,EAAA,EAAAA,EAAAH,UAAAI,OAAAD,IAAAD,EAAAC,EAAA,GAAAH,UAAAG,GACpB,OAAOzB,KAAKU,SAASa,KAAKF,MAAMrB,KAAKU,SAAUY,YAGnDxB,EAAAa,UAAAgB,eAAA,SAAeZ,EAAmBC,GAC9B,OAAOhB,KAAKU,SAASiB,eAAeN,MAAMrB,KAAKU,SAAUY,YAG7DxB,EAAAa,UAAAiB,mBAAA,SAAmBb,GACf,OAAOf,KAAKU,SAASkB,mBAAmBP,MAAMrB,KAAKU,SAAUY,YAGjExB,EAAAa,UAAAkB,UAAA,SAAad,GAAb,IAAAe,EAAA9B,KAuBI,OAtBKA,KAAKC,mBAAmBc,KACzBf,KAAKC,mBAAmBc,GAAa,GAEzCf,KAAKC,mBAAmBc,KAEnBf,KAAKE,kBAAkBa,KACxBf,KAAKE,kBAAkBa,GAAa,IAAIgB,EAAAA,YAAW,SAACC,GAChD,IAAMC,EAAW,SAACC,GACdF,EAASG,KAAKD,IAGjB,OADAJ,EAAKpB,SAASI,GAAGC,EAAWkB,GACrB,WACHH,EAAK7B,mBAAmBc,KACmB,IAAvCe,EAAK7B,mBAAmBc,KACzBe,EAAKpB,SAASiB,eAAeZ,EAAWkB,UACjCH,EAAK5B,kBAAkBa,QAGvCqB,KACCC,EAAAA,UAGDrC,KAAKE,kBAAkBa,IAGlCjB,EAAAa,UAAA2B,iBAAA,SAAoBvB,GAApB,IAAAe,EAAA9B,KACI,OAAO,IAAIuC,SAAW,SAAAC,GAAW,OAAAV,EAAKb,KAAKF,EAAWyB,qBCjF9CC,EAAc1C,GAC1B,OAAO,IAAID,EAAcC,OAGhB2C,EAAsB,IAAIC,EAAAA,eAA+B,qCAGtE,SAAAC,YACWA,EAAAC,QAAP,SAAe9C,GACX,MAAO,CACH+C,SAAUF,EACVG,UAAW,CACP,CAAEC,QAASN,EAAqBO,SAAUlD,GAC1C,CACIiD,QAASlD,EACToD,WAAYT,EACZU,KAAO,CAACT,gCAV3BU,EAAAA,SAAQ5B,KAAA,CAAC","sourcesContent":["import { Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport * as io from 'socket.io-client';\n\nimport { SocketIoConfig } from './config/socket-io.config';\n\nexport class WrappedSocket {\n    subscribersCounter: Record<string, number> = {};\n    eventObservables$: Record<string, Observable<any>> = {};\n    ioSocket: any;\n    emptyConfig: SocketIoConfig = {\n        url: '',\n        options: {}\n    };\n\n    constructor(private config: SocketIoConfig) {\n        if (config === undefined) {\n            config = this.emptyConfig;\n        }\n        const url: string = config.url;\n        const options: any = config.options;\n        const ioFunc = (io as any).default ? (io as any).default : io;\n        this.ioSocket = ioFunc(url, options);\n    }\n\n    of(namespace: string) {\n        this.ioSocket.of(namespace);\n    }\n\n    on(eventName: string, callback: Function) {\n        this.ioSocket.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: Function) {\n        this.ioSocket.once(eventName, callback);\n    }\n\n    connect() {\n        return this.ioSocket.connect();\n    }\n\n    disconnect(close?: any) {\n        return this.ioSocket.disconnect.apply(this.ioSocket, arguments);\n    }\n\n    emit(eventName: string, ...args: any[]) {\n        return this.ioSocket.emit.apply(this.ioSocket, arguments);\n    }\n\n    removeListener(eventName: string, callback?: Function) {\n        return this.ioSocket.removeListener.apply(this.ioSocket, arguments);\n    }\n\n    removeAllListeners(eventName?: string) {\n        return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);\n    }\n\n    fromEvent<T>(eventName: string): Observable<T> {\n        if (!this.subscribersCounter[eventName]) {\n            this.subscribersCounter[eventName] = 0;\n        }\n        this.subscribersCounter[eventName]++;\n\n        if (!this.eventObservables$[eventName]) {\n            this.eventObservables$[eventName] = new Observable((observer: any) => {\n                const listener = (data: T) => {\n                    observer.next(data);\n                };\n                 this.ioSocket.on(eventName, listener);\n                 return () => {\n                     this.subscribersCounter[eventName]--;\n                     if (this.subscribersCounter[eventName] === 0) {\n                        this.ioSocket.removeListener(eventName, listener);\n                        delete this.eventObservables$[eventName];\n                     }\n                };\n            }).pipe(\n                share()\n            );\n        }\n        return this.eventObservables$[eventName];\n    }\n\n    fromOneTimeEvent<T>(eventName: string): Promise<T> {\n        return new Promise<T>(resolve => this.once(eventName, resolve));\n    }\n\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { SocketIoConfig } from './config/socket-io.config';\nimport { WrappedSocket } from './socket-io.service';\n\n/** Socket factory */\nexport function SocketFactory(config: SocketIoConfig) {\n    return new WrappedSocket(config);\n}\n\nexport const SOCKET_CONFIG_TOKEN = new InjectionToken<SocketIoConfig>('__SOCKET_IO_CONFIG__');\n\n@NgModule({})\nexport class SocketIoModule {\n    static forRoot(config: SocketIoConfig): ModuleWithProviders<SocketIoModule> {\n        return {\n            ngModule: SocketIoModule,\n            providers: [\n                { provide: SOCKET_CONFIG_TOKEN, useValue: config },\n                {\n                    provide: WrappedSocket,\n                    useFactory: SocketFactory,\n                    deps : [SOCKET_CONFIG_TOKEN]\n                }\n            ]\n        };\n    }\n }\n"]}